// Code generated by go-localize; DO NOT EDIT.
// This file was generated by robots at
// 2022-04-23 21:52:04.792286232 +0100 BST m=+0.001352416

package localizations

import (
	"bytes"
	"fmt"
	"strings"
	"text/template"
)

var localizations = map[string]string{
	"en.devicechooser.bus":                  "Bus",
	"en.devicechooser.bus-id":               "Bus.Device",
	"en.devicechooser.device":               "Device",
	"en.devicechooser.label":                "Choose the device to monitor",
	"en.devicechooser.product":              "Product",
	"en.devicechooser.product-id":           "Product ID",
	"en.devicechooser.title":                "Choose Device",
	"en.devicechooser.vendor":               "Vendor",
	"en.devicechooser.vendor-id":            "Vendor ID",
	"en.devicechooser.vendor-id-product-id": "Vendor ID:Product ID",
	"en.mainmenu.file":                      "File",
	"en.mainmenu.open":                      "Open",
	"en.mainmenu.save":                      "Save",
	"en.usbsee.open":                        "_Open",
	"en.usbsee.open_tooltip":                "Open an existing recording",
	"en.usbsee.save":                        "_Save",
	"en.usbsee.save_as_tooltip":             "Save the current recording as under a new name",
	"en.usbsee.save_tooltip":                "Save the current recording",
	"en.usbsee.start_msg":                   "Welcome to UsbSee.\nClick the new button above to start a recording",
	"en.usbsee.title":                       "Usbsee",
}

type Replacements map[string]interface{}

type Localizer struct {
	Locale         string
	FallbackLocale string
	Localizations  map[string]string
}

func New(locale string, fallbackLocale string) *Localizer {
	t := &Localizer{Locale: locale, FallbackLocale: fallbackLocale}
	t.Localizations = localizations
	return t
}

func (t Localizer) SetLocales(locale, fallback string) Localizer {
	t.Locale = locale
	t.FallbackLocale = fallback
	return t
}

func (t Localizer) SetLocale(locale string) Localizer {
	t.Locale = locale
	return t
}

func (t Localizer) SetFallbackLocale(fallback string) Localizer {
	t.FallbackLocale = fallback
	return t
}

func (t Localizer) GetWithLocale(locale, key string, replacements ...*Replacements) string {
	str, ok := t.Localizations[t.getLocalizationKey(locale, key)]
	if !ok {
		str, ok = t.Localizations[t.getLocalizationKey(t.FallbackLocale, key)]
		if !ok {
			return key
		}
	}

	// If the str doesn't have any substitutions, no need to
	// template.Execute.
	if strings.Index(str, "}}") == -1 {
		return str
	}

	return t.replace(str, replacements...)
}

func (t Localizer) Get(key string, replacements ...*Replacements) string {
	str := t.GetWithLocale(t.Locale, key, replacements...)
	return str
}

func (t Localizer) getLocalizationKey(locale string, key string) string {
	return fmt.Sprintf("%v.%v", locale, key)
}

func (t Localizer) replace(str string, replacements ...*Replacements) string {
	b := &bytes.Buffer{}
	tmpl, err := template.New("").Parse(str)
	if err != nil {
		return str
	}

	replacementsMerge := Replacements{}
	for _, replacement := range replacements {
		for k, v := range *replacement {
			replacementsMerge[k] = v
		}
	}

	err = template.Must(tmpl, err).Execute(b, replacementsMerge)
	if err != nil {
		return str
	}
	buff := b.String()
	return buff
}
